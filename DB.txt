문장이 끝나면 세미콜론 꼭 넣기!



조회
SELECT (a) FROM (b);
(a) 에 AS 를 함께 쓰면 필드의 이름을 변경 가능.
(a) 에 * 를 쓰면 모든 필드를 확인 가능.
(a) 에서 수식 계산을 수행할 수 있음.

정렬
SELECT (a) FROM (b) ORDER BY {(c) ([DESC])};
정렬 기준을 추가할 수 있음.
오름차순, 내림차순 설정 가능. (default = 오름차순)
{} 부분을 여러 개 작성 가능. 작성할 때는 콤마로 연결. 먼저 위치한 기준이 우선.
계산을 수행하고 난 결과값으로 정렬 가능.
값이 null 인 경우 오름차순 정렬하면 가장 위에, 내림차순 정렬하면 가장 밑에 위치.



필터링
- clause (절. 3장 1절 그런거)
DISTINCT : 중복되는 레코드를 제거. SELECT 문 바로 뒤에 위치함.
WHERE : 특정 검색 조건을 지정. 새로운 문장으로 뒤에 붙음. 여러 조건을 동시에 설정 가능.
LIMIT : 조회하는 레코드 수를 제한. LIMIT [offset,] row_count 형식. (offset : 시작 위치, row_count : 출력할 줄 갯수)

- Operator
BETWEEN (a) AND (b) : (a) 와 (b) 사이를 지정
IN (a) : (a) 안에 있는지 확인
LIKE (a) : 비슷한 걸 확인. %는 갯수 제한이 없음. _ 는 글자 하나하나를 의미.
AND : 앞뒤가 모두 만족하는지 확인
OR : 앞뒤 중 하나라도 만족하는지 확인
NOT : 뒤 조건을 반전



Grouping Data
- GROUP BY 절 : 레코드를 그룹화하여 요약본을 생성 ('집계 함수' 와 함께 사용). 정렬도 함께 진행됨.
- HAVING : GROUP BY 와 함께 사용. 집계 항목에 대한 세부 조건을 설정.

집계 함수 : 값에 대한 계산을 수행하고 단일 값을 반환하는 함수. AS 를 통해 필드명을 지정할 수 있음.
SUM : 
AVG : 그룹(겹치는 값)의 평균을 계산하는 함수.
MAX : 
MIN : 
COUNT : 그룹(겹치는 값)이 몇 개 인지 세는 함수.



*** SELECT statement 실행 순서 ***
FROM - WHERE - GROUP BY - HAVING - SELECT - ORDER BY - LIMIT
테이블에서(FROM) - 특정 조건에 맞춰서(WHERE) - 그룹화하고(GROUP BY) - 그룹 내의 조건을 맞춰주고(HAVING) - 조회하여(SELECT) - 정렬하고(ORDER BY) - 특정 위치 값을 가져옴(LIMIT)
