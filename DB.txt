문장이 끝나면 세미콜론 꼭 넣기!



조회
SELECT (a) FROM (b);
(a) 에 AS 를 함께 쓰면 필드의 이름을 변경 가능.
(a) 에 * 를 쓰면 모든 필드를 확인 가능.
(a) 에서 수식 계산을 수행할 수 있음.

정렬
SELECT (a) FROM (b) ORDER BY {(c) ([DESC])};
정렬 기준을 추가할 수 있음.
오름차순, 내림차순 설정 가능. (default = 오름차순)
{} 부분을 여러 개 작성 가능. 작성할 때는 콤마로 연결. 먼저 위치한 기준이 우선.
계산을 수행하고 난 결과값으로 정렬 가능.
값이 null 인 경우 오름차순 정렬하면 가장 위에, 내림차순 정렬하면 가장 밑에 위치.



필터링
- clause (절. 3장 1절 그런거)
DISTINCT : 중복되는 레코드를 제거. SELECT 문 바로 뒤에 위치함.
WHERE : 특정 검색 조건을 지정. 새로운 문장으로 뒤에 붙음. 여러 조건을 동시에 설정 가능.
LIMIT : 조회하는 레코드 수를 제한. LIMIT [offset,] row_count 형식. (offset : 시작 위치, row_count : 출력할 줄 갯수)

- Operator
BETWEEN (a) AND (b) : (a) 와 (b) 사이를 지정
IN (a) : (a) 안에 있는지 확인
LIKE (a) : 비슷한 걸 확인. %는 갯수 제한이 없음. _ 는 글자 하나하나를 의미.
AND : 앞뒤가 모두 만족하는지 확인
OR : 앞뒤 중 하나라도 만족하는지 확인
NOT : 뒤 조건을 반전



Grouping Data
- GROUP BY 절 : 레코드를 그룹화하여 요약본을 생성 ('집계 함수' 와 함께 사용). 정렬도 함께 진행됨.
- HAVING : GROUP BY 와 함께 사용. 집계 항목에 대한 세부 조건을 설정.

집계 함수 : 값에 대한 계산을 수행하고 단일 값을 반환하는 함수. AS 를 통해 필드명을 지정할 수 있음.
SUM : 
AVG : 그룹(겹치는 값)의 평균을 계산하는 함수.
MAX : 
MIN : 
COUNT : 그룹(겹치는 값)이 몇 개 인지 세는 함수.



*** SELECT statement 실행 순서 ***
FROM - WHERE - GROUP BY - HAVING - SELECT - ORDER BY - LIMIT
테이블에서(FROM) - 특정 조건에 맞춰서(WHERE) - 그룹화하고(GROUP BY) - 그룹 내의 조건을 맞춰주고(HAVING) - 조회하여(SELECT) - 정렬하고(ORDER BY) - 특정 위치 값을 가져옴(LIMIT)



PRAGMA table_info('[테이블 이름]') : [테이블 이름] 테이블의 필드 확인
테이블을 만들 때, 각 필드에는 이름, 타입, 제약조건이 반드시 들어가야 한다!



CREATE TABLE [테이블 이름] (필드명, 데이터타입, 제약조건) 으로 테이블을 만들 수 있음.



SQLite 데이터 타입
1. NULL : 아무 값도 없다.
2. INTEGER : 정수
3. REAL : 부동 소수점
4. TEXT : 문자열
5. BLOB : 이미지, 동영상, 문서 등의 바이너리 데이터



제약 조건(Constraints)
테이블의 필드에 적용되는 규칙 또는 제한 사항. 이걸 왜 거냐? 데이터 무결성을 유지하고 데이터베이스 일관성을 보장할 수 있음.
- PRIMARY KEY : 해당 필드를 기본 키로 지정. INTEGER 타입에만 적용 가능.
- NOT NULL : 해당 필드에 NULL 값을 허용하지 않도록 지정
- FOREIGN KEY : 다른 테이블과의 외래 키 관계를 정의



AUTOINCREMENT : 자동으로 고유한 정수값을 생성하고 할당하는 필드 속성. 만약 값을 삭제한다 해도 그 값을 다시 사용하는 일은 없다. LIKE 장고.



ALTER TABLE : 테이블 및 필드 조작.
ADD COLUMN : 이름, 타입, 제약 조건(NOT NULL) 을 다 넣어도 생성이 안 된다. 왜? DEFAULT '[기본 값]' 이 없어서! 반드시 DEFAULT 를 넣어야 생성 가능. 두 개의 필드를 한 번에 만들 수 없음.
RENAME COLUMN : 필드 이름 변경. [기존 이름] TO [새 이름]
DROP COLUMN : 필드 삭제.
RENAME TO : 테이블 이름 변경. 이름이 변경되면 기존에 연결되어 있던 내용이 보이지 않을 수 있음에 주의.
DROP TABLE : 테이블 삭제.



INSERT INTO [테이블(필드)] VALUES (각 필드에 넣을 값) 을 통해 테이블 내에 정보를 기입할 수 있음.
VALUES 뒤에 여러 줄의 값을 넣어 동시에 여러 개의 밸류를 넣을 수 있음.



UPDATE [테이블] SET [칼럼 이름 = 새 칼럼 이름] 을 통해 테이블 내의 필드 이름값을 변경할 수 있음. WHERE 절과 혼용하여 위치를 정할 수 있음.
DELETE [테이블] 을 통해 테이블 내의 필드값을 삭제할 수 있음. DROP TABLE과 구분 필요. WHERE 절과 혼용하여 위치를 정할 수 있음.



query 내에서 또 다른 query 문을 사용해 subquery 를 만들 수 있음.



관계형 데이터베이스 에서의 관계 : 여러 테이블 간의 논리적 연결. 외래 키를 사용.
모든 데이터를 한 테이블에서 관리하게 되면 각 정보들을 찾을 때 무결성에 문제가 생길 수 있음. 따라서, 테이블을 분리할 필요가 있다.
but, 테이블을 분리하면 데이터 관리는 용이해질 지라도 출력시에는 문제가 있을 수 있다.
테이블을 한 개 이상 동시에 출력할 수는 없음. 따라서, 다른 테이블과 결합하여 출력해야 함.
그 때 사용하는 절이 JOIN. SELECT와 같이 사용. ON 과 같이 사용.



INNER JOIN : 두 테이블을 결합 후 조건에 만족하는 필드 조회.
LEFT JOIN : 두 테이블을 결합 후 조건에 만족하는 필드는 조건에 맞게, 만족하지 않는 왼쪽 필드는 그냥 조회.

